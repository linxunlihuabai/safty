<template>
  <div class="app-container">
    <div class="panel">
      <div class="panel-title">
        <breadcrumb class="breadcrumb-container" />
      </div>
      <!-- 温馨提示 -->
      <div class="prompt" v-show="active == 0">请填写正确的统一社会信用代码，一旦注册，不允许修改！</div>
      <el-row>
        <el-col :span="22">
          <el-steps size="medium" align-center :active="active" finish-status="success">
            <el-step title="填写注册信息"></el-step>
            <el-step title="提交成功，等待审核结果"></el-step>
          </el-steps>
        </el-col>
      </el-row>
      <!-- 注册表单信息 -->
      <el-card class="box-card">
        <!-- 步骤一内容 -->
        <el-form
          ref="userInfo"
          size="small"
          v-show="active == 0"
          label-width="150px"
          :rules="rules"
          :model="userInfo"
        >
          <el-form-item label="统一社会信息代码" prop="creditCode">
            <el-input v-model="userInfo.creditCode" placeholder="请输入统一社会信息代码"></el-input>
          </el-form-item>
          <el-form-item label="用户名" prop="username" required>
            <el-input v-model="userInfo.username" placeholder="请输入用户名"></el-input>
          </el-form-item>
          <el-form-item label="密码" prop="password" required>
            <el-input type="password" v-model="userInfo.password" placeholder="请输入密码"></el-input>
          </el-form-item>
          <el-form-item label="确认密码" prop="confirmPassword" required>
            <el-input type="password" v-model="userInfo.confirmPassword" placeholder="请再次输入密码"></el-input>
          </el-form-item>
          <el-form-item label="企业名称" prop="companyName">
            <el-input v-model="userInfo.companyName" placeholder="请输入企业名称"></el-input>
          </el-form-item>
          <el-form-item label="安全负责人" prop="responsiblePerson">
            <el-input v-model="userInfo.responsiblePerson" placeholder="请输入安全负责人"></el-input>
          </el-form-item>
          <el-form-item label="移动电话号码" required prop="responsiblePersonPhone">
            <el-input v-model="userInfo.responsiblePersonPhone" placeholder="请输入移动电话号码"></el-input>
          </el-form-item>
          <el-form-item label="邮箱" prop="email">
            <el-input v-model="userInfo.email" placeholder="请输入邮箱"></el-input>
          </el-form-item>
          <el-row>
            <el-form-item label="验证码" class="captcha" prop="captcha">
              <el-col :span="12">
                <el-input v-model="userInfo.captcha" placeholder="请输入验证码"></el-input>
              </el-col>
              <el-col :span="12" class="sendcode">
                <el-button
                  type="button"
                  @click="sendcode('userInfo')"
                  :disabled="disabled"
                  v-if="!disabled"
                >点击进行邮箱验证</el-button>
                <el-button
                  type="button"
                  :disabled="disabled"
                  v-if="disabled"
                >{{btntxt}}</el-button>
              </el-col>
            </el-form-item>
          </el-row>
          <el-form-item style="text-align:center;">
            <el-button type="primary" @click="submitForm('userInfo')">下一步</el-button>
            <el-button>取消</el-button>
          </el-form-item>
          <router-link style="margin-left:750px;color:red;" to="/login">我要回到登录页面？</router-link>
        </el-form>
        <!-- 步骤二内容 -->
        <div v-show="active >= 1">
          <p align="center">
            <i class="el-step__icon-inner el-icon-check submit"></i>
          </p>
          <h1 align="center">提交成功！等待审核结果</h1>
          <p align="center" class="finalDecision">审核结果会以邮件的方式通知您，请注意查收！</p>
          <router-link style="margin-left:750px;color:red;" to="/login">我要回到登录页面？</router-link>
        </div>
      </el-card>
    </div>
  </div>
</template>

<script>
import { regList } from "@/utils/regList";
import {
  getRegisterCaptcha,
  register,
  checkEmail,
  checkUsername,
  checkResponsiblePersonPhone
} from "@/api/user/index";
import Breadcrumb from "@/components/Breadcrumb";
export default {
  components: {
    Breadcrumb
  },
  data() {
    // 手机验证
    var isvalidPhone = (rule, value, callback) => {
      const reg = /^1[3|4|5|6|7|8|9][0-9]\d{8}$/;
      if (value === "") {
        callback(new Error("手机号码不能为空"));
      } else if (!reg.test(value)) {
        callback(new Error("请输入正确的手机号码"));
      } else {
        checkResponsiblePersonPhone(value)
          .then(res => {
            res = res.data;
            if (res.status == 200) {
              callback();
            } else {
              callback(new Error("手机号码已存在"));
            }
          })
          .catch(res => {
            callback(new Error("手机号码验证异常！请重试"));
          });
      }
    };

    // 密码包含 数字,英文,字符中的两种以上，长度8-20
    var validatePass = (rule, value, callback) => {
      /* 密码不能全部是数字，或全部是小写字母，或全部是大写字母 */
      const reg = /^(?![0-9]+$)(?![a-z]+$)(?![A-Z]+$)(?!([^(0-9a-zA-Z)])+$).{8,20}$/;
      if (value === "") {
        callback(new Error("密码不能为空"));
      }
      if (!reg.test(value)) {
        callback(new Error("密码包含 数字,英文,字符中的两种以上，长度6-20"));
      }
      callback();
    };

    // 再次输入密码验证
    var validatePass2 = (rule, value, callback) => {
      if (value === "") {
        callback(new Error("请再次输入密码"));
      } else if (value !== this.userInfo.password) {
        callback(new Error("两次输入密码不一致!"));
      } else {
        callback();
      }
    };

    var checkEmailValidatore = (rule, value, callback) => {
      const reg = /^([a-zA-Z]|[0-9])(\w|\-)+@[a-zA-Z0-9]+\.([a-zA-Z]{2,4})$/;
      if (!reg.test(value)) {
        callback(new Error("请输入正确的邮箱地址"));
      } else {
        checkEmail(value)
          .then(res => {
            if (res.data.status == 200) {
              this.userInfo.emailFlag = true;
              callback();
            } else {
              this.userInfo.emailFlag = false;
              callback(new Error("邮箱已存在"));
            }
          })
          .catch(() => {
              this.userInfo.emailFlag = false;
            callback(new Error("验证邮箱异常！请重试"));
          });
      }
    };

    // 验证用户名是否存在
    var checkUsernameValidatore = (rule, value, callback) => {
      if (value === "") {
        callback(new Error("用户名不能为空"));
      } //它的意思是 当符合要求的条件的时候，就触发回调函数。这个回调的函数是显示成功的标识
      else {
        checkUsername(value)
          .then(res => {
            res = res.data;
            if (res.status == 200) {
              callback();
            } else {
              callback(new Error("用户名已存在"));
            }
          })
          .catch(res => {
            // console.log(res);
            callback(new Error("用户名验证异常！请重试"));
          });
      }
    };
    // 验证验证码
    /*  const validateIdentifyCode = (rule, value, callback) => {
      if (value === "") {
        callback(new Error("验证码不能为空"));
      } else if (value !== res.data.captcha) {
        callback(new Error("验证码输入错误"));
      } else {
        callback();
      }
    }; */
    return {
      userInfo: {
        creditCode: "",
        username: "",
        password: "",
        confirmPassword: "",
        companyName: "",
        responsiblePerson: "",
        responsiblePersonPhone: "",
        captcha: "",
        email: "",
        emailFlag: false,
        taskId: ""
      },
      rules: {
        confirmPassword: [{ validator: validatePass2, trigger: "blur" }],
        password: [{ validator: validatePass, trigger: "blur" }],
        responsiblePersonPhone: [{ validator: isvalidPhone, trigger: "blur" }],
        username: [{ validator: checkUsernameValidatore, trigger: "blur" }],
        /* captcha: [{ validator: validateIdentifyCode, trigger: "blur" }], */
        creditCode: [
          {
            required: true,
            message: "统一社会信息代码不能为空",
            trigger: "blur"
          }
        ],
        email: [{ validator: checkEmailValidatore, trigger: "blur" }],
        companyName: [
          { required: true, message: "企业名称不能为空", trigger: "blur" }
        ],
        captcha: [
          { required: true, message: "验证码不能为空", trigger: "blur" }
        ],
        responsiblePerson: [
          { required: true, message: "安全负责人不能为空", trigger: "blur" }
        ]
      },
      disabled: false,
      time: 0,
      btntxt: "重新发送",
      active: 0
    };
  },
  methods: {
    submitForm(formName) {
      this.$refs[formName].validate(valid => {
        console.log("注册操作" + this.userInfo);
        if (valid) {
          register(this.userInfo).then(res => {
            res = res.data;
            console.log(res.msg);
            if (res.status == 200) {
              this.active = 2;
            }
          });
        } else {
          console.log("error submit!!");
          return false;
        }
      });
    },
    // 邮箱验证发送验证码
    sendcode() {
        if (this.userInfo.emailFlag) {
          console.log(this.userInfo.email);
          getRegisterCaptcha({
            mail: this.userInfo.email,
            taskId: this.userInfo.taskId
          }).then(res => {
            res = res.data;
            this.userInfo.taskId = res.obj;
          });
          this.time = 60;
          this.disabled = true;
          this.timer();
        } else {
          console.log("error submit!!");
          return false;
        };
    },
    //60S倒计时
    timer() {
      if (this.time > 0) {
        this.time--;
        this.btntxt = this.time + "s后重新获取";
        setTimeout(this.timer, 1000);
      } else {
        this.time = 0;
        this.btntxt = "获取验证码";
        this.disabled = false;
      }
    }
  }
};
</script>

<style>
.prompt {
  width: 900px;
  height: 34px;
  line-height: 34px;
  background-color: #07c181;
  color: white;
  padding-left: 8px;
  margin-bottom: 10px;
}
.sendcode {
  padding-left: 20px;
}
.submit {
  color: red;
}
.finalDecision {
  font-size: 14px;
  font-weight: bold;
}
</style>