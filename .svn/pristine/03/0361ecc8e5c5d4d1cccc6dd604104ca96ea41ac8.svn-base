<template>
  <div class="app-container">
    <div class="panel">
      <div class="panel-title">
        <breadcrumb class="breadcrumb-container" />
      </div>
      <!-- 登录时忘记密码用的表单 -->
      <el-form
        ref="forgetPasswordForm"
        size="small"
        :rules="rules"
        :model="forgetPasswordForm"
        label-width="180px"
      >
        <el-form-item label="企业名称" prop="companyName">
          <el-input v-model="forgetPasswordForm.companyName"></el-input>
        </el-form-item>
        <el-form-item label="注1册时用的代码证类型" prop="codeCertificateTypWhenRegistering">
          <el-input v-model="forgetPasswordForm.codeCertificateTypWhenRegistering"></el-input>
        </el-form-item>
        <el-form-item label="证件号码" prop="IDNumber">
          <el-input v-model="forgetPasswordForm.IDNumber"></el-input>
        </el-form-item>
        <el-form-item label="安全负责人手机号码" prop="safetyDirectorPhone">
          <el-input v-model="forgetPasswordForm.safetyDirectorPhone"></el-input>
        </el-form-item>
        <el-form-item label="邮箱" prop="mailboxVerification">
          <el-input v-model="forgetPasswordForm.mailboxVerification"></el-input>
        </el-form-item>
        <el-form-item label="请重新设置密码" prop="password">
          <el-input
            type="password"
            v-model="forgetPasswordForm.password"
            auto-complete="off"
            placeholder="输入密码"
          ></el-input>
        </el-form-item>
        <el-form-item label="确认密码" prop="confirmPassword">
          <el-input
            type="password"
            v-model="forgetPasswordForm.confirmPassword"
            auto-complete="off"
            placeholder="确认密码"
          ></el-input>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="submitForm('forgetPasswordForm')">修改密码</el-button>
          <p class="login" @click="gotoLogin">已有账号？立即登录</p>
        </el-form-item>
      </el-form>
    </div>
  </div>
</template>

<script>
/* 
import forgetRuls from "@/utils/formValidation"; */
import Breadcrumb from "@/components/Breadcrumb";
export default {
  components: {
    Breadcrumb
  },
  data() {
    var isvalidPhone = (rule, value, callback) => {
      const reg = /^1[3|4|5|7|8][0-9]\d{8}$/;
      if (value === "") {
        callback(new Error("手机号码不能为空"));
      }
      if (!reg.test(value)) {
        callback(new Error("请输入正确的手机号码"));
      }
      return true;
    };

    // 密码进行验证 密码不能全部是数字，或全部是小写字母，或全部是大写字母
    var validatePass = (rule, value, callback) => {
      /* 密码不能全部是数字，或全部是小写字母，或全部是大写字母 */
      if (value === "") {
        callback(new Error("请输入密码"));
      } else if (value.toString().length < 8 || value.toString().length > 18) {
        callback(new Error("密码长度为8-16位"));
      } else if (/^[0-9]{1,20}$/.exec(value)) {
        callback(new Error("不能全是数字"));
      } else if (/^[a-z]+$/.exec(value)) {
        callback(new Error("不能全是小写字母"));
      } else if (/^[A-Z]+$/.exec(value)) {
        callback(new Error("不能全是大写字母"));
      } else {
        callback();
      }
    };

    // 再次输入密码验证
    var validatePass2 = (rule, value, callback) => {
      if (value === "") {
        callback(new Error("请再次输入密码"));
      } else if (value !== this.forgetPasswordForm.password) {
        callback(new Error("两次输入密码不一致!"));
      } else {
        return true;
      }
    };
    // 邮箱进行验证
    var sendcode = (rule, value, callback) => {
      var reg = /^([a-zA-Z]|[0-9])(\w|\-)+@[a-zA-Z0-9]+\.([a-zA-Z]{2,4})$/;
      if (value === "") {
        callback(new Error("邮箱方式不能为空"));
      }
      if (!reg.test(value)) {
        callback(new Error("请输入正确的邮箱地址"));
      } else {
        this.$message({
          message: "发送成功",
          type: "success",
          center: true
        });
        //1分钟后获取
        this.time = 60;
        this.disabled = true;
        this.timer();
        return true;
      }
    };

    return {
      forgetPasswordForm: {
        companyName: "",
        codeCertificateTypWhenRegistering: "",
        IDNumber: "",
        safetyDirectorPhone: "",
        mailboxVerification: "",
        password: "",
        confirmPassword: ""
      },
      rules: {
        password: [{ validator: validatePass, trigger: "blur" }],
        safetyDirectorPhone: [{ validator: isvalidPhone, trigger: "blur" }],
        mailboxVerification: [{ validator: sendcode, trigger: "blur" }],

        companyName: [
          { required: true, message: "请输入企业名称", trigger: "blur" }
        ],
        safetyDirector: [
          { required: true, message: "请输入安全负责人", trigger: "blur" }
        ],
        codeCertificateTypWhenRegistering: [
          {
            required: true,
            message: "注册时用的代码证类型不能为空",
            trigger: "blur"
          }
        ],
        IDNumber: [
          { required: true, message: "证件号码不能为空", trigger: "blur" }
        ]
      },
      disabled: false,
      time: 0,
      btntxt: "重新发送"
    };
  },
  methods: {
    //60S倒计时
    timer() {
      if (this.time > 0) {
        this.time--;
        this.btntxt = this.time + "s后重新获取";
        setTimeout(this.timer, 1000);
      } else {
        this.time = 0;
        this.btntxt = "获取验证码";
        this.disabled = false;
      }
    },
    // <!--进入登录页-->
    gotoLogin() {
      this.$router.push({
        path: "/index"
      });
    },
    // <!--提交注册-->
    submitForm(formName) {
      this.$refs[formName].validate(valid => {
        if (valid) {
          // this.rules = forgetRuls;
          setTimeout(() => {
            alert("注册成功");
          }, 400);
        } else {
          console.log("error submit!!");
          return false;
        }
      });
    }
  },
  mounted() {}
};
</script>

<style>
.loading-wrapper {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  bottom: 0;
  background: #aedff8;
  display: flex;
  align-items: center;
  justify-content: center;
}
.register-wrapper img {
  position: absolute;
  z-index: 1;
}
.register-wrapper {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  bottom: 0;
}
#register {
  max-width: 340px;
  margin: 60px auto;
  background: #fff;
  padding: 20px 40px;
  border-radius: 10px;
  position: relative;
  z-index: 9;
}
.title {
  font-size: 26px;
  line-height: 50px;
  font-weight: bold;
  margin: 10px;
  text-align: center;
}
.el-form-item {
  text-align: center;
}
.login {
  margin-top: 10px;
  font-size: 14px;
  line-height: 22px;
  color: #1ab2ff;
  cursor: pointer;
  text-align: left;
  text-indent: 8px;
  width: 160px;
}
.login:hover {
  color: #2c2fd6;
}
.code >>> .el-form-item__content {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.code button {
  margin-left: 20px;
  width: 140px;
  text-align: center;
}
.el-button--primary:focus {
  background: #409eff;
  border-color: #409eff;
  color: #fff;
}
</style>