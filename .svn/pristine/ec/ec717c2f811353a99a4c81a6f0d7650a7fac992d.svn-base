<template>
  <div class="app-container">
    <div class="panel">
      <div class="panel-title">
        <breadcrumb class="breadcrumb-container" />
      </div>
      <div class="panel-main">
        <div class="prompt zhou-prompt">如果您查看的文件不是图片请点击右上角的小图标进行查看哟</div>
        <el-row id="searchBar" class="searchBar">
          <el-col :span="10">
            <el-card>
              <el-tree
                ref="tree"
                v-loading="loading"
                node-key="id"
                expand-on-click-node
                :filter-node-method="filterNode"
                :default-expanded-keys="treeExpandedKeys"
                class="accessibleResources"
                :data="fileCategoryList"
                accordion
                :load="loadNode"
                lazy
                draggable
                @node-click="treeClick"
                @node-expand="treeExpand"
              >
                <!-- :props="defaultProps" -->
                <span slot-scope="{ node, data }" class="custom-tree-node">
                  <span class="el-tree-node__label ">{{ node.label }}</span>
                  <!-- <span>{{ data.fileSize }} KB </span> -->
                  <span>{{ data.operatorName }}</span>
                </span>
              </el-tree>
            </el-card>
          </el-col>
          <el-col :span="14" :class="searchBarFixed == true ? 'isFixed' :''">
            <el-card v-show="fileDetailDialog" style="width:100%">
              <div slot="header">
                <el-row>
                  <span class="information">文件详情</span>
                  <el-button-group class="operate">
                    <FileDownloadBtn :file-id="detail.id" :file-name="detail.fileName" />
                    <sun-button v-show="ss" :type="'view'" @click="filePreview(detail)">查看文件</sun-button>
                  </el-button-group>
                </el-row>
              </div>
              <el-row>
                <el-col :span="12">
                  <strong class="str">
                    <i class="el-icon-tickets" />文件名：
                  </strong>
                  <span class="rightSpan">{{ detail.fileName }}</span>
                </el-col>
                <el-col :span="12">
                  <strong class="str">
                    <i class="el-icon-warning-outline" />文件大小：
                  </strong>
                  <span class="rightSpan">{{ detail.fileSize }}</span>
                </el-col>
              </el-row>
              <el-row>
                <el-col :span="12">
                  <strong class="str">
                    <i class="el-icon-user-solid" />操作人：
                  </strong>
                  <span class="rightSpan">{{ detail.operatorName }}</span>
                </el-col>
                <el-col :span="12">
                  <strong class="str">
                    <i class="el-icon-upload" />上传时间：
                  </strong>
                  <span class="rightSpan">{{ detail.createTime | dateFormat }}</span>
                </el-col>
                <!--  <el-col :span="12">
                  <strong class="str">
                    <i class="el-icon-folder-opened" />文件目录：
                  </strong>
                  <span class="rightSpan">{{ detail.diskDirectory }}</span>
                </el-col> -->
              </el-row>
              <el-row>
                <el-col v-show="ttss" :span="12">
                  <strong class="str">
                    <i class="el-icon-picture" />文件图片：
                  </strong>
                  <img :src="detail.url" alt="">
                </el-col>
                <el-col :span="12">
                  <strong class="str">
                    <i class="el-icon-download" />下载次数：
                  </strong>
                  <span class="rightSpan">{{ detail.downloads }}</span>
                </el-col>
              </el-row>
            </el-card>
          </el-col>
        </el-row>
      </div>
      <!-- 用于预览上传多张图片的dialog -->
      <pic-dialog :visible.sync="sunViewPics" :pic-list="sunPicList" />
    </div>
  </div>
</template>

<script>
import { fileManageList } from '@/api/fileManagement/myFile'
import { mapGetters } from 'vuex'
export default {
  data() {
    return {
      fileCategoryList: [],
      treeExpandedKeys: [],
      temp: [], // 用于保存树的状态
      defaultProps: {
        children: 'children'
      },
      searchBarFixed: false,
      loading: false,
      historyDialog: false,
      detail: {},
      fileDetailDialog: false,
      ss: false,
      ttss: false
    }
  },
  computed: {
    ...mapGetters([
      'classify_options'
    ]),
    treeList() {
      return this.permission_routes.filter(item => {
        return item.meta
      })
    }
  },
  destroyed() {
    window.removeEventListener('scroll', this.handleScroll)
  },
  mounted() {
    window.addEventListener('scroll', this.handleScroll)
    const categoryMap = this.classify_options['上传文件类别']
    for (const key in categoryMap) {
      var item = categoryMap[key]
      if (!item.children) {
        item.children = [{ label: '暂无' }]
      }
      this.fileCategoryList.push(item)
    }
  },
  methods: {
    handleScroll() {
      var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop
      var offsetTop = document.querySelector('#searchBar').offsetTop
      if (scrollTop > offsetTop) {
        this.searchBarFixed = true
      } else {
        this.searchBarFixed = false
      }
    },
    loadNode(node, resolve) {
      console.log(node)
      if (node.level === 0) {
        return resolve([])
      }
      if (node.level > 1) return resolve([])

      fileManageList(node.data.id).then(res => {
        this.temp = this.depClone(res.data.obj)
        const data = this.depClone(res.data.obj)
        resolve(data)
      }).catch(() => {})
    },
    // 过滤筛选
    filterNode(value, data) {
      if (!value) return true
      return data.meta.title.indexOf(value) !== -1
    },
    // 当节点打开时，记录下打开节点的id
    treeExpand(data, node, self) {
      console.log(node)
      this.treeExpandedKeys = [data.id]
      this.fileDetailDialog = false
    // 展开列表，获取该分类的下的数据
    // this.getFileList(data.id, node)
    },
    // 当节点关闭时，移除节点的id
    treeCollapse(data) {
      const index = this.treeExpandedKeys.indexOf(data.id)
      if (index > -1) {
        this.treeExpandedKeys.splice(index, 1)
      }
    },
    fileUploadForm() {
    // 编辑信息模态框显示
      this.historyDialog = true
    },
    treeClick(data, node, thisNode) {
    // console.log(data)
      if (node.level === 2) {
      // 信息展示显示
        this.detail = data
        this.fileDetailDialog = true
        const fileName = this.detail.fileName // 文件名
        const ext = fileName.substring(fileName.lastIndexOf('.') + 1) // 文件后缀名
          .toLowerCase()
        if (ext === 'jpg' || ext === 'png') {
        // 限制文件格式
          this.ss = false
          this.ttss = true
          console.log('jpg')
        } else {
        //
          this.ss = true
          this.ttss = false
          console.log('不对哦')
        }
      }
    }
  }
}
</script>

<style lang="scss" scoped>
.accessibleResources {
  margin-top: 20px;
  margin-bottom: 20px;
  /deep/ .el-tree-node__content {
    height: 40px;
  }
  /deep/ .custom-tree-node {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 14px;
    padding-right: 8px;
  }

  /deep/ .el-tree-node.is-drop-inner>.el-tree-node__content .el-tree-node__label {
    background-color: #409eff;
    color: #fff;
}
}
.panel-main{
  position: relative;
  top: 20px;
  margin-bottom: 20px;
}
.operate{
  position: relative;
  bottom: 14px;
  left: 350px;
}
.information{
  position: relative;
  left: 50%;
  font-size: 24px;
  font-weight: bold;
}
.rightSpan{
  font-size: 16px;
}
.str {
  padding-right: 10px;
  line-height: 50px;
  font-size: 16px;
  font-family:Arial,Helvetica,sans-serif;
}
.zhou-prompt{
  width: 450px;
}
.searchBar{
  .isFixed{
    position:fixed;
    width: 900px;
    right: 30px;
    background-color:#Fff;
    top:0;
    z-index:999;
  }
}
</style>
