<template>
  <div class="app-container">
    <div class="panel">
      <div class="panel-title">
        <breadcrumb class="breadcrumb-container" />
      </div>
      <div class="panel-main">
        <el-input v-model="filterText" placeholder="输入关键字进行过滤" />
        <el-tree
          ref="tree"
          class="accessibleResources"
          :data="menuList"
          node-key="id"
          expand-on-click-node
          :filter-node-method="filterNode"
          :props="defaultProps"
        >
          <span slot-scope="{ node, data }" class="custom-tree-node">
            <span class="el-tree-node__label">{{ node.label }}</span>
            <span>
              <el-button type="primary" size="mini" @click.stop="() => append(data)">添加菜单</el-button>
              <el-button type="primary" size="mini" @click.stop="() => edit(data)">修改菜单</el-button>
              <el-button type="danger" size="mini" @click.stop="() => remove(node, data)">删除菜单</el-button>
            </span>
          </span>
        </el-tree>
      </div>
      <el-dialog
        append-to-body
        title="分类管理"
        :visible.sync="show"
        width="800px"
        :close-on-click-modal="false"
      >
        <el-form ref="form" :model="form" label-width="120px" class="qualification">
          <el-form-item v-if="handle=='修改'" label="路由名称">
            <el-input v-model="form.name" />
          </el-form-item>
          <el-form-item label="菜单名称">
            <el-input v-model="form.meta.title" />
          </el-form-item>

          <el-form-item label="菜单图标">
            <el-input v-model="form.meta.icon" />
          </el-form-item>

          <el-form-item v-if="handle=='修改'" label="根路由">
            <el-input v-model="form.meta.origin" />
          </el-form-item>

          <el-form-item label="菜单组件">
            <el-col>
              <el-input v-model="form.component" />
            </el-col>
          </el-form-item>
          <el-form-item label="路径">
            <el-input v-model="form.path" />
          </el-form-item>

          <el-form-item label="完整路径">
            <el-input v-model="form.meta.url" />
          </el-form-item>

          <el-form-item label="重定向路径">
            <el-col>
              <el-input v-model="form.redirect" />
            </el-col>
          </el-form-item>

          <el-form-item label="是否隐藏菜单">
            <el-col :span="11">
              <el-radio v-model="form.hidden" :label="true">隐藏</el-radio>
              <el-radio v-model="form.hidden" :label="false">不隐藏</el-radio>
            </el-col>
          </el-form-item>
        </el-form>
        <div slot="footer" class="dialog-footer">
          <el-button @click="show=false">取 消</el-button>
          <el-button type="primary" @click="submit()">立即{{ handle }}</el-button>
        </div>
      </el-dialog>
    </div>
  </div>
</template>

<script>
import { mapGetters } from 'vuex'
export default {
  data() {
    return {
      form: {
        parentId: '',
        id: '',
        name: '',
        path: '',
        component: '',
        redirect: '',
        hidden: '',
        meta: {
          title: '',
          icon: '',
          origin: '',
          url: ''
        }
      },
      show: false,
      handle: '',
      filterText: '',
      defaultProps: {
        children: 'children',
        label: function(data) {
          return data.meta.title
        }
      },
      menuList: []
    }
  },
  computed: {
    ...mapGetters(['permission_routes']),
    treeList() {
      return this.permission_routes.filter(item => {
        return item.meta
      })
    }
  },
  watch: {
    filterText(val) {
      this.$refs.tree.filter(val)
    }
  },
  created() {
    this.getRequest('/system/manage/getAllMenu').then(res => {
      this.menuList = res.data.obj
    })
  },
  methods: {
    // 过滤筛选
    filterNode(value, data) {
      if (!value) return true
      return data.meta.title.indexOf(value) !== -1
    },
    // 添加菜单
    append(data) {
      console.log(data)
      this.handle = '添加'
      // this.form = {}
      this.show = true
      this.form.parentId = data.id
      this.form.meta.url = data.meta.url + '/'
      this.form.name = data.path
    },

    // 修改菜单
    edit(data) {
      this.handle = '修改'
      this.form = data
      this.show = true
      console.log(data)
    },

    // 删除菜单
    remove(node, data) {
      this.handleCofirm('您确定要删除该组织么?', 'warning')
        .then(() => {
          const parent = node.parent
          const children = parent.data.children || parent.data

          const index = children.findIndex(d => {
            return d.id === data.id
          })
          children.splice(index, 1)
          this.$message({
            type: 'success',
            message: '删除成功！'
          })
        })
        .catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除'
          })
        })
    },
    submit() {
      if (this.handle === '添加') {
        // this.

      } else if (this.handle === '修改') {
        const { children, ...params } = this.form

        // eslint-disable-next-line no-unused-vars
        const { id } = params
        console.log(params)

        this.putRequest(`/system/manage/updateMenu/${id}`, params).then(res => {
          // console.log(this.menuList, '主菜单')
          // console.log(this.form, '修改的菜单')

          // var find = function(arr, id) {
          //   arr.map((item) => { // 利用foreach循环遍历
          //     if (item.id === id)// 判断递归结束条件
          //     {
          //       console.log(item,'修改的数据')
          //       return item
          //     } else if ( item.children && item.children.length > 0) // 判断chlidren是否有数据
          //     {
          //       find(item.children, id) // 递归调用
          //     }
          //   })
          // }

          // const x = find(this.menuList, id)
          // console.log(x)

          this.$message({
            type: 'success',
            message: '修改成功！'
          })
        })
      }
    }
  }
}
</script>

<style lang="scss" scoped>
.accessibleResources {
  margin-top: 20px;
  margin-bottom: 20px;
  /deep/ .el-tree-node__content {
    height: 40px;
  }
  /deep/ .custom-tree-node {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 14px;
    padding-right: 8px;
  }

  /deep/ .el-tree-node.is-drop-inner>.el-tree-node__content .el-tree-node__label {
    background-color: #409eff;
    color: #fff;
}
}
</style>
