
// 输入框限制数字指令
/** ***
 * (decimal)小数点位数
 * (max) 最大值
 * (min)最小值
** ***/
function onInput(el, ele, binding, vnode) {
  function handle() {
    let val = ele.value
    console.log(val, '初始')

    // modifiers为修饰符对象，传入了float，则其float属性为true
    if (binding.modifiers.float) {
    // 清除"数字"和"."以及"-"以外的字符

      val = val.replace(/[^\-\d.]/g, '')

      // 只保留第一个'.'号
      val = val.replace(/\.{2,}/g, '.').replace('.', '$#$').replace(/\./g, '').replace('$#$', '.')
      console.log(val)

      // 只保留第一个'-'号
      val = val.replace(/\-{2,}/g, '-').replace('-', '$#$').replace(/\-/g, '').replace('$#$', '-')

      // 将 '-.' 替换成 '-0.'
      val = val.replace(/^\./g, '0.').replace(/^\-\./, '-0.')

      if (typeof binding.value !== 'undefined') {
        // 期望保留的最大小数位数
        let pointKeep = 0
        if (typeof binding.value === 'string' ||
            typeof binding.value === 'number') {
          pointKeep = parseInt(binding.value)
        } else if (typeof binding.value === 'object') {
          // 支持新的小数点保留位配置
          pointKeep = binding.value.decimal
        }
        if (!isNaN(pointKeep)) {
          if (!Number.isInteger(pointKeep) ||
            pointKeep < 0) {
            pointKeep = 0
          }

          // 增加'-'号的支持
          const str = `^(\\-)*(\\d+)\\.(\\d{${pointKeep}}).*$`
          const reg = new RegExp(str)
          if (pointKeep === 0) {
            // 不需要小数点
            val = val.replace(reg, '$1$2')
          } else {
            // 通过正则保留小数点后指定的位数
            val = val.replace(reg, '$1$2.$3')
            console.log(val)
          }
        }
      }
      if (val !== '' && typeof binding.value === 'object') {
        let { min, max } = binding.value
        min = parseFloat(min)
        max = parseFloat(max)

        if (!isNaN(min)) {
          if (min >= 0) {
            // 不能是负数
            val = val.replace('-', '')
          }
          if (parseFloat(val) < min) {
            val = min
          }
        }
        if (!isNaN(max)) {
          if (parseFloat(val) > max) {
            val = max
          }
        }
      }
    } else {
      val = val.replace(/[^\d]/g, '')
      console.log(1, '整数')
    }

    ele.value = val

    // 手动触发数据双向绑定
    if (vnode.componentInstance) {
      console.log(vnode)
      vnode.componentInstance.$emit('input', ele.value)
    } else {
      vnode.elm.dispatchEvent(new CustomEvent('input', ele.value))
    }
  }

  return handle
}
export const numberInput = {
  inserted(el, binding, vnode) {
    const ele = el.tagName === 'INPUT' ? el : el.querySelector('input')

    // 显示placeholder的最大值最小值
    var placeholder = ''
    if (typeof binding.value === 'object') {
      let { min, max, decimal } = binding.value
      min = parseFloat(min)
      max = parseFloat(max)
      decimal = parseInt(decimal)
      if (!isNaN(decimal)) {
        placeholder += `保留${decimal}位小数 ,`
      }
      if (!isNaN(min)) {
        placeholder += `最小为${min} ,`
      }
      if (!isNaN(max)) {
        placeholder += `最大为${max} ,`
      }
    } else if (typeof binding.value === 'string' ||
    typeof binding.value === 'number') {
      if (!isNaN(binding.value) && binding.value > 0) {
        placeholder += `保留${binding.value}位小数 ,`
      }
    }
    if (placeholder) {
      ele.placeholder = placeholder.slice(0, -1)
    } else {
      ele.placeholder = '请输入数字'
    }

    ele.addEventListener('change', onInput(el, ele, binding, vnode), false)
  }
}

