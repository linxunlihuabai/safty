<template>
  <div class="app-container">
    <div class="panel">
      <div class="panel-title">
        <breadcrumb class="breadcrumb-container" />
      </div>
      <div class="panel-main">
        <!-- <el-row :gutter="30">
          <el-col :span="10">
            <el-input placeholder="请输入角色英文名称" v-model="roleForm.enRole">
              <template slot="prepend">ROLE_</template>
            </el-input>
          </el-col>
          <el-col :span="10">
            <el-input v-model="roleForm.zhRole" placeholder="请输入角色中文名称"></el-input>
          </el-col>
          <el-col :span="4">
            <el-button type="primary" @click="addRole()">添加角色</el-button>
          </el-col>
        </el-row>
        <el-row>
          <el-collapse @change="handleChange">
            <el-collapse-item
              v-for="item in roleList"
              :key="item.id"
              :title="item.name"
              :name="item.id"
            >
              <el-card class="box-card">
                <div slot="header" class="clearfix">
                  <span>可访问的资源</span>
                  <el-button
                    style="float: right; padding: 3px 0; color:red"
                    type="text"
                    @click="delRole(item.id)"
                  >
                    <i class="el-icon-delete"></i>
                  </el-button>
                </div>
                <el-tree
                  class="accessibleResources"
                  :data="treeList"
                  :ref="'treeList'+item.id"
                  show-checkbox
                  node-key="id"
                  :props="defaultProps"
                ></el-tree>
                <div class="footbtn">
                  <el-button>取消修改</el-button>
                  <el-button type="primary">确认修改</el-button>
                </div>
              </el-card>
            </el-collapse-item>
          </el-collapse>
        </el-row>-->
        <el-input placeholder="输入关键字进行过滤" v-model="filterText"></el-input>
        <el-tree
          class="accessibleResources"
          :data="treeList"
          node-key="id"
          default-expand-all
          :expand-on-click-node="false"
          :filter-node-method="filterNode"
          :props="defaultProps"
          ref="tree"
        >
          <span class="custom-tree-node" slot-scope="{ node, data }">
            <span>{{ node.label }}</span>
            <span>
              <el-button type="primary" size="mini" @click="() => append(data)">添加部门</el-button>
              <el-button type="danger" size="mini" @click="() => remove(node, data)">删除部门</el-button>
            </span>
          </span>
        </el-tree>
      </div>
    </div>
  </div>
</template>

<script>
import { mapGetters } from "vuex";
let newid = 1000;
export default {
  data() {
    return {
      filterText: "",
      roleList: [
        {
          id: 1,
          name: "系统管理员"
        },
        {
          id: 2,
          name: "局账户"
        },
        {
          id: 3,
          name: "队账户"
        },
        {
          id: 4,
          name: "单位账户"
        },
        {
          id: 5,
          name: "未分配账户账户"
        }
      ],
      treeName: [],
      defaultProps: {
        children: "children",
        label: function(data) {
          return data.meta.title;
        }
      }
    };
  },
  computed: {
    ...mapGetters(["permission_routes"]),
    treeList() {
      return this.permission_routes.filter(item => {
        return item.meta;
      });
    }
  },
  watch: {
    filterText(val) {
      this.$refs.tree.filter(val);
    }
  },
  methods: {
    //过滤筛选
    filterNode(value, data) {
      if (!value) return true;
      return data.meta.title.indexOf(value) !== -1;
    },
    //
    append(data) {
      const newChild = { id: newid++, meta: { title: '新的组织', icon: 'example', origin: '/login' }, children: [] };
      if (!data.children) {
        this.$set(data, "children", []);
      }
      console.log(data)
      data.children.push(newChild);
    },

    remove(node, data) {
      const parent = node.parent;
      const children = parent.data.children || parent.data;
      const index = children.findIndex(d => d.id === data.id);
      children.splice(index, 1);
    }
  }
};
</script>

<style lang="scss">
.custom-tree-node {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-size: 14px;
  padding-right: 8px;
}
.accessibleResources {
  margin-top: 20px;
  margin-bottom: 20px;
}
.footbtn {
  display: flex;
  justify-content: flex-end;
}
</style>

<style lang="scss" scoped>
.accessibleResources{
  /deep/.custom-tree-node{

    // padding: 15px 0;
  }
  /deep/.el-tree-node__content{
    height: 40px;
  }
}
</style>