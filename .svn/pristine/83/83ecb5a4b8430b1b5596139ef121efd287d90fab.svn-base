<template>
  <div :class="{fullscreen:fullscreen}" class="tinymce-container" :style="{width:containerWidth}">
    <textarea :id="tinymceId" class="tinymce-textarea" />
    <div class="editor-custom-btn-container">
      <editorImage color="#1890ff" class="editor-upload-btn" @successCBK="imageSuccessCBK" />
    </div>
  </div>
</template>

<script>
/**
 * docs:
 * https://panjiachen.github.io/vue-element-admin-site/feature/component/rich-editor.html#tinymce
 */
import editorImage from './components/EditorImage'
import plugins from './plugins'
import toolbar from './toolbar'
import load from './dynamicLoadScript'

// why use this cdn, detail see https://github.com/PanJiaChen/tinymce-all-in-one
const tinymceCDN = 'https://cdn.jsdelivr.net/npm/tinymce-all-in-one@4.9.3/tinymce.min.js'

import { upload } from '@/api/config/upload'

export default {
  name: 'Tinymce',
  components: { editorImage },
  props: {
    id: {
      type: String,
      default: function() {
        return 'vue-tinymce-' + +new Date() + ((Math.random() * 1000).toFixed(0) + '')
      }
    },
    value: {
      type: String,
      default: ''
    },
    toolbar: {
      type: Array,
      required: false,
      default() {
        return []
      }
    },
    menubar: {
      type: String,
      default: 'file edit insert view format table'
    },
    height: {
      type: [Number, String],
      required: false,
      default: 360
    },
    width: {
      type: [Number, String],
      required: false,
      default: 'auto'
    }
  },
  data() {
    return {
      hasChange: false,
      hasInit: false,
      tinymceId: this.id,
      fullscreen: false,
      languageTypeList: {
        'en': 'en',
        'zh': 'zh_CN',
        'es': 'es_MX',
        'ja': 'ja'
      }
    }
  },
  computed: {
    containerWidth() {
      const width = this.width
      if (/^[\d]+(\.[\d]+)?$/.test(width)) { // matches `100`, `'100'`
        return `${width}px`
      }
      return width
    }
  },
  watch: {
    value(val) {
      if (this.hasInit) {
        // if (this) {
        this.$nextTick(() => {
          window.tinymce.get(this.tinymceId).setContent(val || '')
        })
        // }
      }
    }
  },
  mounted() {
    this.init()
  },
  activated() {
    if (window.tinymce) {
      this.initTinymce()
    }
  },
  deactivated() {
    this.destroyTinymce()
  },
  destroyed() {
    this.destroyTinymce()
  },
  methods: {
    init() {
      // dynamic load tinymce from cdn
      load(tinymceCDN, (err) => {
        if (err) {
          this.$message.error(err.message)
          return
        }
        this.initTinymce()
      })
    },
    initTinymce() {
      const _this = this
      window.tinymce.init({
        selector: `#${this.tinymceId}`,
        language: this.languageTypeList['zh'],
        height: this.height,
        body_class: 'panel-body ',
        object_resizing: true, // 是否开启表格图片大小调整
        toolbar: this.toolbar.length > 0 ? this.toolbar : toolbar,
        menubar: this.menubar,
        plugins: plugins,
        end_container_on_empty_block: true,
        powerpaste_word_import: 'clean',

        // CONFIG: Paste
        paste_retain_style_properties: 'all',
        paste_word_valid_elements: '*[*]', // word需要它
        paste_data_images: true, // 粘贴的同时能把内容里的图片自动上传，非常强力的功能
        paste_convert_word_fake_lists: false, // 插入word文档需要该属性
        paste_webkit_styles: 'all',
        paste_merge_formats: true,
        nonbreaking_force_tab: false,
        paste_auto_cleanup_on_paste: false,

        code_dialog_height: 450,
        code_dialog_width: 1000,
        advlist_bullet_styles: 'square',
        advlist_number_styles: 'default',
        imagetools_toolbar: 'rotateleft rotateright | flipv fliph | editimage imageoptions',
        default_link_target: '_blank',
        link_title: false,
        // nonbreaking_force_tab: true, // inserting nonbreaking space &nbsp; need Nonbreaking Space Plugin
        init_instance_callback: editor => {
          if (_this.value) {
            editor.setContent(_this.value)
          }
          _this.hasInit = true
          editor.on('input change undo redo blur', (event) => {
            // if (event.type === 'keyup' || event.type === 'nodechange') return
            // console.log(event.type)
            this.hasChange = true
            if (event.type === 'blur') {
              this.$emit('input', editor.getContent())
            } // 防止光标刷新
          })
        },
        setup(editor) {
          editor.on('FullscreenStateChanged', (e) => {
            _this.fullscreen = e.state
          })
        },
        // // 图片上传
        // images_upload_handler: function(blobInfo, success, failure) {
        //   	console.log('blobInfo我被调用了')
        //   if (blobInfo.blob().size > self.maxSize) {
        //     failure('文件体积过大')
        //   }

        //   if (self.accept.indexOf(blobInfo.blob().type) > 0) {
        //     uploadPic()
        //   } else {
        //     failure('图片格式错误')
        //   }
        //   function uploadPic() {
        //     const xhr = new XMLHttpRequest()
        //     const formData = new FormData()
        //     xhr.withCredentials = self.withCredentials
        //     xhr.open('POST', self.url)
        //     xhr.onload = function() {
        //       if (xhr.status !== 200) {
        //         // 抛出 'on-upload-fail' 钩子
        //         self.$emit('on-upload-fail')
        //         failure('上传失败: ' + xhr.status)
        //         return
        //       }

        //       const json = JSON.parse(xhr.responseText)
        //       // 抛出 'on-upload-complete' 钩子
        //       self.$emit('on-upload-complete', [
        //         json, success, failure
        //       ])
        //     }
        //     formData.append('file', blobInfo.blob())
        //     xhr.send(formData)
        //   }
        // }
        // 整合七牛上传
        // images_dataimg_filter(img) {
        //   setTimeout(() => {
        //     const $image = $(img)
        //     $image.removeAttr('width')
        //     $image.removeAttr('height')
        //     if ($image[0].height && $image[0].width) {
        //       $image.attr('data-wscntype', 'image')
        //       $image.attr('data-wscnh', $image[0].height)
        //       $image.attr('data-wscnw', $image[0].width)
        //       $image.addClass('wscnph')
        //     }
        //   }, 0)
        //   return img
        // },
        images_upload_handler(blobInfo, success, failure, progress) {
          progress(0)

          const formData = new FormData()
          formData.append('file', blobInfo.blob())
          formData.append('type', _this.GLOBAL.FILE_TYPE.OTHER.type)
          upload(formData).then((res) => {
            const url = process.env.VUE_APP_BASE_API + res.data.obj.url
            success(url)
            progress(100)
          })
          // }).catch(err => {
          //   failure('出现未知问题，刷新页面，或者联系程序员')
          //   console.log(err)
          // })
        }
        // // Image
      })
    },
    destroyTinymce() {
      const tinymce = window.tinymce.get(this.tinymceId)
      if (this.fullscreen) {
        tinymce.execCommand('mceFullScreen')
      }

      if (tinymce) {
        tinymce.destroy()
      }
    },
    setContent(value) {
      window.tinymce.get(this.tinymceId).setContent(value)
    },
    getContent() {
      window.tinymce.get(this.tinymceId).getContent()
    },
    imageSuccessCBK(arr) {
      const _this = this
      arr.forEach(v => {
        window.tinymce.get(_this.tinymceId).insertContent(`<img class="wscnph" src="${v.url}" >`)
      })
    }
  }
}
</script>

<style scoped>
.tinymce-container {
  position: relative;
  line-height: normal;
}
.tinymce-container>>>.mce-fullscreen {
  z-index: 10000;
}
.tinymce-textarea {
  visibility: hidden;
  z-index: -1;
}
.editor-custom-btn-container {
  position: absolute;
  right: 4px;
  top: 4px;
  /*z-index: 2005;*/
}
.fullscreen .editor-custom-btn-container {
  z-index: 10000;
  position: fixed;
}
.editor-upload-btn {
  display: inline-block;
}
</style>
