<template>
  <div class="app-container">
    <div class="panel">
      <div class="panel-title">
        <breadcrumb class="breadcrumb-container" />
      </div>
      <div class="panel-main">
        <el-input v-model="filterText" placeholder="输入关键字进行过滤" />
        <el-tree
          ref="tree"
          class="accessibleResources"
          :data="menuList"
          node-key="id"
          expand-on-click-node
          :filter-node-method="filterNode"
          :props="defaultProps"
          :default-expanded-keys="treeExpandedKeys"
          draggable
          @node-drop="handleDrop"
          @node-expand="treeExpand"
          @node-collapse="treeCollapse"
        >
          <span slot-scope="{ node, data }" class="custom-tree-node">
            <span class="el-tree-node__label">{{ node.label }}</span>
            <span>
              <el-button
                v-if="data.parentId<=1"
                type="primary"
                size="mini"
                @click.stop="() => append(data)"
              >添加</el-button>
              <el-button
                v-if="data.parentId!=0"
                type="primary"
                size="mini"
                @click.stop="() => edit(data)"
              >
                修改
              </el-button>
              <el-button
                v-if="data.parentId!=0"
                type="danger"
                size="mini"
                @click.stop="() => remove(node, data)"
              >
                删除
              </el-button>
            </span>
          </span>
        </el-tree>
      </div>
      <el-dialog
        append-to-body
        title="分类管理"
        :visible.sync="show"
        width="800px"
        :close-on-click-modal="false"
        @closed="handleDialogClosed('form')"
      >
        <el-form ref="form" :model="form" :rules="rules" label-width="120px" class="qualification">
          <el-form-item label="组织名称" prop="name">
            <el-input v-model="form.name" />
          </el-form-item>
          <el-form-item label="默认角色" prop="roleId">
            <el-select v-model="form.roleId" placeholder="请选择">
              <el-option
                v-for="item in roles"
                :key="item.id"
                :label="item.roleName"
                :value="item.id"
              />
            </el-select>
          </el-form-item>

          <template v-if="form.type=='Y'">
            <el-form-item label="企业类别" prop="detail.category">
              <el-input v-model="form.detail.category" />
            </el-form-item>
            <el-form-item label="出资人全称" prop="detail.promoter">
              <el-input v-model="form.detail.promoter" />
            </el-form-item>
            <el-form-item label="产权层级" prop="detail.propertyLevel">
              <el-input v-model="form.detail.propertyLevel" />
            </el-form-item>
            <el-form-item label="资质类别" prop="detail.qualificationCategory">
              <el-input v-model="form.detail.qualificationCategory" />
            </el-form-item>
            <el-form-item label="资质级别" prop="detail.qualificationLevel">
              <el-input v-model="form.detail.qualificationLevel" />
            </el-form-item>
            <el-form-item label="备注" prop="detail.remark">
              <el-input v-model="form.detail.remark" />
            </el-form-item>

          </template>

        </el-form>
        <div slot="footer" class="dialog-footer">
          <el-button @click="show=false">取 消</el-button>
          <el-button type="primary" :loading="btnLoading" @click="submit()">立即{{ handle }}</el-button>
        </div>
      </el-dialog>
    </div>
  </div>
</template>

<script>
import { getOrganizeList, getRolesList, addOrganize, updateOrganize, deleteOrganize } from '@/api/systemSetup/organizationalManagement'
export default {
  data() {
    return {
      form: {
        parentId: '',
        id: '',
        name: '',
        type: '',
        roleId: null,
        detail: {
          category: '',
          promoter: '',
          propertyLevel: '',
          qualificationCategory: '',
          qualificationLevel: '',
          remark: ''
        }
      },
      rules: {
        name: [
          { required: true, message: '请输入组织名称', trigger: 'blur' }
        ],
        roleId: [
          { required: true, message: '请选择默认角色', trigger: 'blur' }
        ],
        'detail.category': [
          { required: true, message: '请输入企业类别', trigger: 'blur' }
        ],
        'detail.promoter': [
          { required: true, message: '请输入出资人全称', trigger: 'blur' }
        ],
        'detail.propertyLevel': [
          { required: true, message: '请输入产权层级', trigger: 'blur' }
        ],
        'detail.qualificationCategory': [
          { required: true, message: '请输入资质类别', trigger: 'blur' }
        ],
        'detail.qualificationLevel': [
          { required: true, message: '请输入资质级别', trigger: 'blur' }
        ]
      },
      show: false,
      handle: '',
      filterText: '',
      defaultProps: {
        children: 'children',
        label: 'name'
      },
      roles: [],
      btnLoading: false,
      menuList: [],
      treeExpandedKeys: [],
      temp: [] // 用于保存树的状态
    }
  },
  computed: {
  },
  watch: {
    filterText(val) {
      this.$refs.tree.filter(val)
    }
  },
  created() {
    getOrganizeList().then(res => {
      this.menuList = [...res.data.obj]
      this.temp = this.depClone(res.data.obj)

      getRolesList().then(res => {
        this.roles = res.data.obj
      }).catch(() => {})
    }).catch(() => {})
  },
  methods: {
    // 处理dialog关闭
    handleDialogClosed(formName) {
      this.dialogClosed(this, formName)
    },
    // 当节点打开时，记录下打开节点的id
    treeExpand(data, node, self) {
      this.treeExpandedKeys.push(data.id)
    },

    // 当节点关闭时，移除节点的id
    treeCollapse(data) {
      const index = this.treeExpandedKeys.indexOf(data.id)
      if (index > -1) {
        this.treeExpandedKeys.splice(index, 1)
      }
    },
    // 过滤筛选
    filterNode(value, data) {
      if (!value) return true
      return data.meta.title.indexOf(value) !== -1
    },
    // 添加菜单
    append(data) {
      this.handle = '添加'
      this.show = true
      this.$nextTick(() => {
        this.form.parentId = data.id
        data.type == 'J' ? this.form.type = 'D' : this.form.type = 'Y'
      })
    },

    // 修改菜单
    edit(data) {
      this.handle = '修改'
      this.show = true
      this.$nextTick(() => {
        data.detail = data.detail ? data.detail : {
          category: null,
          promoter: null,
          propertyLevel: null,
          qualificationCategory: null,
          qualificationLevel: null,
          remark: null
        }
        this.form = this.depClone(data)
      })
    },
    // 移动节点操作
    handleDrop(draggingNode, dropNode, dropType, ev) {
      const draggingData = draggingNode.data

      const dropData = dropNode.data

      let moveFlag = false

      if (dropType !== 'inner') {
        // 处理排序
        draggingData.parentId = dropData.parentId
        // draggingData.sort = (dropType === 'before' ? dropData.sort - 1 : dropData.sort + 1)

        moveFlag = true
      } else {
        if (dropNode.parent.data.parentId === 0) {
          // 处理进入
          draggingData.parentId = dropData.id
          moveFlag = true
        } else {
          moveFlag = false
          // 目前菜单上限两级，拒绝处理三级
          this.handleAlert('无法移动,上限二级菜单', 'warning').then(() => {
            this.menuList = this.depClone(this.temp)
          })
            .catch(() => {
              this.menuList = this.depClone(this.temp)
            })
        }
      }
      if (moveFlag) {
        // 发起修改请求
        this.handleCofirm('您确定要移动该菜单么?', 'warning')
          .then(res => {
            updateOrganize(draggingData.id, draggingNode.data.type, draggingData)
              .then(res => {
                this.temp = this.depClone(this.menuList)
              }).catch(() => {
                // this.handleAlert('修改失败，请重试', 'warning')
                this.menuList = this.depClone(this.temp)
              })
          }).catch((rej) => {
            // this.handleAlert('修改失败，请重试', 'warning')
            this.menuList = this.depClone(this.temp)
          })
      }
    },

    // 删除菜单
    remove(node, data) {
      this.handleCofirm('您确定要删除么?', 'warning')
        .then(() => {
          deleteOrganize(data.id)
            .then(res => {
              if (res.data.status === 500) {
                this.handleAlert('请先删除子菜单！', 'warning')
              } else {
                this.$refs.tree.remove(data.id)
                this.temp = this.depClone(this.menuList)
              }
            })
            .catch(() => {
              this.menuList = this.depClone(this.temp)
            })
        })
        .catch(() => {})
    },
    submit() {
      this.$refs.form.validate((valid) => {
        if (valid) {
          this.btnLoading = true
          if (this.handle === '添加') {
            let params
            if (this.form.type === 'Y') {
              params = this.form
            } else {
              const { detail, ...temp } = this.form
              params = temp
            }
            addOrganize(this.form.type, params)
              .then(res => {
                // 返回的id
                this.form.id = res.data.obj
                this.$refs.tree.append(this.depClone(this.form), this.form.parentId)
                this.temp = this.depClone(this.menuList)
                this.btnLoading = false
                this.show = false
              })
              .catch(() => {
                this.btnLoading = false
                this.menuList = this.depClone(this.temp)
                // this.handleAlert('添加失败，请重试', 'warning')
              })
          } else if (this.handle === '修改') {
            const { id } = this.form

            let params
            if (this.form.type === 'Y') {
              const { children, ...temp } = this.form
              params = temp
            } else {
              const { detail, children, ...temp } = this.form
              params = temp
            }
            updateOrganize(id, this.form.type, params)
              .then(res => {
                let data = this.$refs.tree.getNode(this.form.parentId).data.children
                const updateData = this.depClone(this.form)
                data = data.map(item => {
                  if (item.id === updateData.id) {
                    return updateData
                  } else {
                    return item
                  }
                })

                this.$refs.tree.updateKeyChildren(this.form.parentId, data)
                this.temp = this.depClone(this.menuList)
                this.btnLoading = false
                this.show = false
              })
              .catch(() => {
                this.btnLoading = false
                this.menuList = this.depClone(this.temp)
                // this.handleAlert('修改失败，请重试', 'warning')
              })
          }
        } else {
          return false
        }
      })
    }
  }
}
</script>

<style lang="scss" scoped>
.accessibleResources {
  margin-top: 20px;
  margin-bottom: 20px;
  /deep/ .el-tree-node__content {
    height: 40px;
  }
  /deep/ .custom-tree-node {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 14px;
    padding-right: 8px;
  }

  /deep/ .el-tree-node.is-drop-inner>.el-tree-node__content .el-tree-node__label {
    background-color: #409eff;
    color: #fff;
}
}
</style>
