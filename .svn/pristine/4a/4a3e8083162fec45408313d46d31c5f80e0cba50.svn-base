<template>
  <div class="panel">
    <!-- 个人信息显示面板 -->
    <el-card class="box-card">
      <div slot="header" class="clearfix">
        <el-button style="float: left;" @click="$router.go(-1)" size="small" type="primary">返回</el-button>
        <span>修改密码</span>
      </div>
      <!-- 修改密码 -->
      <el-form
        :model="resetForm"
        :rules="rules"
        ref="resetForm"
        status-icon
        label-width="100px"
        size="medium"
      >
        <el-form-item label="旧密码：" prop="oldPassword">
          <el-input type="password" v-model="resetForm.oldPassword" auto-complete="off"></el-input>
        </el-form-item>
        <el-form-item label="新密码：" prop="newPassword">
          <el-input type="password" v-model="resetForm.newPassword" auto-complete="off"></el-input>
        </el-form-item>
        <el-form-item label="确认密码：" prop="newPassword2">
          <el-input type="password" v-model="resetForm.newPassword2" auto-complete="off"></el-input>
        </el-form-item>
        <el-form-item>
          <el-button
            type="primary"
            :loading="btnLoading"
            @click="toModifyPassword('resetForm')"
          >确认修改</el-button>
        </el-form-item>
      </el-form>
    </el-card>
  </div>
</template>

<script>
import { validatePassword } from "@/utils/regList";
console.log(validatePassword);
export default {
  data() {
    var validateoldPwd = (rule, value, callback) => {
      if (!value) {
        callback(new Error("请输入旧密码"));
      } else if (!validatePassword(value)) {
        callback(new Error("密码包含 数字,英文,字符中的两种以上，长度8-20"));
      } else {
        callback();
      }
    };
    var validatePwd = (rule, value, callback) => {
      if (!value) {
        callback(new Error("请输入新密码"));
      } else if (!validatePassword(value)) {
        callback(new Error("密码包含 数字,英文,字符中的两种以上，长度8-20"));
      } else if (value === this.resetForm.oldPassword) {
        callback(new Error("您未修改密码"));
      } else {
        callback();
      }
    };
    var validatePwd2 = (rule, value, callback) => {
      if (value === "") {
        callback(new Error("请再次输入密码"));
      } else if (value !== this.resetForm.newPassword) {
        callback(new Error("两次输入密码不一致!"));
      } else if (value === this.resetForm.oldPassword) {
        callback(new Error("您未修改密码"));
      } else {
        callback();
      }
    };
    return {
      resetForm: {
        oldPassword: "",
        newPassword: "",
        newPassword2: ""
      },
      rules: {
        oldPassword: [
          { required: true, validator: validateoldPwd, trigger: "blur" }
        ],
        newPassword: [
          { required: true, validator: validatePwd, trigger: "blur" }
        ],
        newPassword2: [
          { required: true, validator: validatePwd2, trigger: "blur" }
        ]
      },
      btnLoading: false
    };
  },
  methods: {
    // 修改密码
    toModifyPassword(formName) {
      this.btnLoading = true;
      this.$refs[formName].validate(valid => {
        if (valid) {
          alert("修改成功");
        }
      });
    },
    // 弹窗：是否关闭
    handleClose(done) {
      this.$confirm("确认关闭？")
        .then(_ => {
          done();
        })
        .catch(_ => {});
    }
  }
};
</script>

<style>
</style>