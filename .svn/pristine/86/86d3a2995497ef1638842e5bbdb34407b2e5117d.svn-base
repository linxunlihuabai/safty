import router from './router'
import store from './store'
// import { Message } from 'element-ui'
import NProgress from 'nprogress' // progress bar
import 'nprogress/nprogress.css' // progress bar style
// import { getToken } from '@/utils/auth' // get token from cookie
import getPageTitle from '@/utils/get-page-title'

NProgress.configure({ showSpinner: false }) // NProgress Configuration

let flag = false
var getRouter // 用来获取后台拿到的路由
const fakeRouter = {
  'router': [{
    path: '/systemSetup',
    component: 'Layout',
    redirect: '/systemSetup/roleManagement',
    name: '系统设置',
    hidden: true,
    meta: {
      title: '系统设置',
      icon: 'example',
      origin: '/systemSetup'
    },
    children: [
      {
        path: 'roleManagement',
        name: '角色管理',
        component: '/systemSetup/roleManagement',
        meta: { title: '角色管理', icon: 'qualification', origin: '/systemSetup',
          path: '/systemSetup/roleManagement' }
      },
      {
        path: 'menuManagement',
        name: '菜单管理',
        component: '/systemSetup/menuManagement',
        meta: { title: '菜单管理', icon: 'qualification', origin: '/systemSetup',
          path: '/systemSetup/menuManagement' }
      },
      {
        path: 'organizationalManagement',
        name: '组织管理',
        component: '/systemSetup/organizationalManagement',
        meta: { title: '组织管理', icon: 'systemSetup', origin: '/systemSetup',
          path: '/systemSetup/organizationalManagement' }
      },
      {
        path: 'classifiedManagement',
        name: '分类管理',
        component: '/systemSetup/classifiedManagement',
        meta: { title: '分类管理', icon: 'systemSetup', origin: '/systemSetup',
          path: '/systemSetup/classifiedManagement' }
      },
      {
        path: 'accountManagement',
        name: '账户管理',
        component: '/systemSetup/accountManagement',
        meta: { title: '账户管理', icon: 'systemSetup', origin: '/systemSetup',
          path: '/systemSetup/accountManagement' }
      },
      {
        path: 'databaseBackup',
        name: '数据库备份',
        component: '/systemSetup/accountManagement',
        meta: { title: '数据库备份', icon: 'systemSetup', origin: '/systemSetup',
          path: '/systemSetup/databaseBackup' }
      }
    ]
  }
  ]

}

router.beforeEach(async(to, from, next) => {
  // start progress bar
  NProgress.start()

  // set page title
  document.title = getPageTitle(to.meta.title)

  // determine whether the user has logged in
  // const hasToken = getToken()

  //

  // console.log(to)
  // 判断是否登录
  // if (true) {
  //   if (to.path === '/login') {
  //     next({ path: '/' })
  //     NProgress.done()
  //   } else {
  if (!flag) {
    // generate accessible routes map based on roles
    getRouter = fakeRouter.router

    const accessRoutes = await store.dispatch('permission/generateRoutes', getRouter)

    router.addRoutes(accessRoutes)
    flag = true

    next({ ...to, replace: true })
  } else {
    next()
  }

  // next();
  // console.log(flag,222)

  // }
  // }

  // if (hasToken) {
  //   if (to.path === '/login') {
  //     // if is logged in, redirect to the home page
  //     next({ path: '/' })
  //     NProgress.done()
  //   } else {
  //     // determine whether the user has obtained his permission roles through getInfo
  //     const hasRoles = store.getters.roles && store.getters.roles.length > 0
  //     if (hasRoles) {
  //       next()
  //     } else {
  //       try {
  //         // get user info
  //         // note: roles must be a object array! such as: ['admin'] or ,['developer','editor']
  //         const { roles } = await store.dispatch('user/getInfo')

  //         // generate accessible routes map based on roles
  //         const accessRoutes = await store.dispatch('permission/generateRoutes', roles)

  //         // dynamically add accessible routes
  //         router.addRoutes(accessRoutes)

  //         // hack method to ensure that addRoutes is complete
  //         // set the replace: true, so the navigation will not leave a history record
  //         next({ ...to, replace: true })
  //       } catch (error) {
  //         // remove token and go to login page to re-login
  //         await store.dispatch('user/resetToken')
  //         Message.error(error || 'Has Error')
  //         next(`/login?redirect=${to.path}`)
  //         NProgress.done()
  //       }
  //     }
  //   }
  // } else {
  //   /* has no token*/

  //   if (whiteList.indexOf(to.path) !== -1) {
  //     // in the free login whitelist, go directly
  //     next()
  //   } else {
  //     // other pages that do not have permission to access are redirected to the login page.
  //     next(`/login?redirect=${to.path}`)
  //     NProgress.done()
  //   }
  // }
})

router.afterEach(() => {
  // finish progress bar
  NProgress.done()
})

// function routerGo(to, next) {
//   getRouter = filterAsyncRouter(getRouter) // 过滤路由
//   router.addRoutes(getRouter) // 动态添加路由
//   global.antRouter = getRouter // 将路由数据传递给全局变量，做侧边栏菜单渲染工作
//   next({ ...to, replace: true })
// }

// function saveObjArr(name, data) { // localStorage 存储数组对象的方法
//   localStorage.setItem(name, JSON.stringify(data))
// }

// function getObjArr(name) { // localStorage 获取数组对象的方法
//   return JSON.parse(window.localStorage.getItem(name))
// }

// function filterAsyncRouter(asyncRouterMap) { // 遍历后台传来的路由字符串，转换为组件对象
//   const accessedRouters = asyncRouterMap.filter(route => {
//     if (route.component) {
//       if (route.component === 'Layout') { // Layout组件特殊处理
//         route.component = Layout
//       } else {
//         route.component = _import(route.component)
//       }
//     }
//     if (route.children && route.children.length) {
//       route.children = filterAsyncRouter(route.children)
//     }
//     return true
//   })

//   return accessedRouters
// }
